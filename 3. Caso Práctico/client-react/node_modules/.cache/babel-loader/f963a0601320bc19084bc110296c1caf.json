{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useFetch } from '../customHooks/requestAPI';\nimport { useState } from 'react';\nconst ROOT_URL = 'http://localhost:3000';\nexport async function LoginUser(dispatch, loginPayload) {\n  _s();\n\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(loginPayload)\n  };\n  const {\n    url,\n    setUrl\n  } = useState(\"\");\n  const [response, loading, hasError] = useFetch(url, setUrl, requestOptions);\n\n  try {\n    dispatch({\n      type: 'REQUEST_LOGIN'\n    }); // let response = await fetch(`${ROOT_URL}/login`, requestOptions);\n    // let data = await response.json();\n\n    setUrl(`${ROOT_URL}/usuario/login`);\n\n    if (response.success) {\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: response.user\n      });\n      localStorage.setItem('currentUser', JSON.stringify(response.user));\n      return response.user;\n    }\n\n    dispatch({\n      type: 'LOGIN_ERROR',\n      error: response.message\n    });\n    return;\n  } catch (error) {\n    dispatch({\n      type: 'LOGIN_ERROR',\n      error: error\n    });\n  }\n}\n\n_s(LoginUser, \"oxHw8fyllWmXYbQ97o289n1bjKA=\", false, function () {\n  return [useFetch];\n});\n\n_c = LoginUser;\nexport async function logout(dispatch) {\n  dispatch({\n    type: 'LOGOUT'\n  });\n  localStorage.removeItem('currentUser');\n  localStorage.removeItem('token');\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginUser\");","map":{"version":3,"sources":["C:/Proyectos/Challenges/intelligential/3. Caso Pr√°ctico/client-react/src/components/context/actions.js"],"names":["useFetch","useState","ROOT_URL","LoginUser","dispatch","loginPayload","requestOptions","method","headers","body","JSON","stringify","url","setUrl","response","loading","hasError","type","success","payload","user","localStorage","setItem","error","message","logout","removeItem"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,2BAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,MAAMC,QAAQ,GAAG,uBAAjB;AAEA,OAAO,eAAeC,SAAf,CAAyBC,QAAzB,EAAmCC,YAAnC,EAAiD;AAAA;;AACtD,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,YAAf;AAHe,GAAvB;AAMF,QAAM;AAAEO,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAEa,QAAF,EAAYC,OAAZ,EAAqBC,QAArB,IAAiChB,QAAQ,CAACY,GAAD,EAAMC,MAAN,EAAcP,cAAd,CAA/C;;AAEE,MAAI;AACFF,IAAAA,QAAQ,CAAC;AAAEa,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR,CADE,CAEF;AACA;;AACAJ,IAAAA,MAAM,CAAE,GAAEX,QAAS,gBAAb,CAAN;;AACA,QAAIY,QAAQ,CAACI,OAAb,EAAsB;AACpBd,MAAAA,QAAQ,CAAC;AAAEa,QAAAA,IAAI,EAAE,eAAR;AAAyBE,QAAAA,OAAO,EAAEL,QAAQ,CAACM;AAA3C,OAAD,CAAR;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCZ,IAAI,CAACC,SAAL,CAAeG,QAAQ,CAACM,IAAxB,CAApC;AACA,aAAON,QAAQ,CAACM,IAAhB;AACD;;AAEDhB,IAAAA,QAAQ,CAAC;AAAEa,MAAAA,IAAI,EAAE,aAAR;AAAuBM,MAAAA,KAAK,EAAET,QAAQ,CAACU;AAAvC,KAAD,CAAR;AACA;AACD,GAbD,CAaE,OAAOD,KAAP,EAAc;AACdnB,IAAAA,QAAQ,CAAC;AAAEa,MAAAA,IAAI,EAAE,aAAR;AAAuBM,MAAAA,KAAK,EAAEA;AAA9B,KAAD,CAAR;AACD;AACF;;GA1BqBpB,S;UAQiBH,Q;;;KARjBG,S;AA4BtB,OAAO,eAAesB,MAAf,CAAsBrB,QAAtB,EAAgC;AACrCA,EAAAA,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;AACAI,EAAAA,YAAY,CAACK,UAAb,CAAwB,aAAxB;AACAL,EAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB;AACD","sourcesContent":["import { useFetch } from '../customHooks/requestAPI'\r\nimport { useState } from 'react'\r\nconst ROOT_URL = 'http://localhost:3000';\r\n \r\nexport async function LoginUser(dispatch, loginPayload) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(loginPayload),\r\n  };\r\n \r\nconst { url, setUrl } = useState(\"\")\r\nconst [ response, loading, hasError] = useFetch(url, setUrl, requestOptions);\r\n\r\n  try {\r\n    dispatch({ type: 'REQUEST_LOGIN' });\r\n    // let response = await fetch(`${ROOT_URL}/login`, requestOptions);\r\n    // let data = await response.json();\r\n    setUrl(`${ROOT_URL}/usuario/login`);\r\n    if (response.success) {\r\n      dispatch({ type: 'LOGIN_SUCCESS', payload: response.user });\r\n      localStorage.setItem('currentUser', JSON.stringify(response.user));\r\n      return response.user;\r\n    }\r\n \r\n    dispatch({ type: 'LOGIN_ERROR', error: response.message });\r\n    return;\r\n  } catch (error) {\r\n    dispatch({ type: 'LOGIN_ERROR', error: error });\r\n  }\r\n}\r\n \r\nexport async function logout(dispatch) {\r\n  dispatch({ type: 'LOGOUT' });\r\n  localStorage.removeItem('currentUser');\r\n  localStorage.removeItem('token');\r\n}"]},"metadata":{},"sourceType":"module"}