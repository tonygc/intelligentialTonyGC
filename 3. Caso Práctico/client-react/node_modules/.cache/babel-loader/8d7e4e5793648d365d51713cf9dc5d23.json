{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport function useFetch(url, opts) {\n  _s();\n\n  const [response, setResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const doFetch = async () => {\n    setHasError(false);\n    setLoading(true);\n    const response = await fetch(url, opts);\n    const data = await response.json();\n    setResponse(data);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    try {\n      doFetch();\n    } catch (err) {\n      setHasError(true);\n    }\n  }, [url]);\n  return [response, loading, hasError];\n}\n\n_s(useFetch, \"2P4JWcX0CkVNVRdIRDSsSZZFJRU=\");","map":{"version":3,"sources":["C:/Proyectos/Challenges/intelligential/3. Caso PrÃ¡ctico/client-react/src/components/customHooks/requestAPI/index.js"],"names":["useEffect","useState","useFetch","url","opts","response","setResponse","loading","setLoading","hasError","setHasError","doFetch","fetch","data","json","err"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAAA;;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMU,OAAO,GAAC,YAAS;AACnBD,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMH,QAAQ,GAAG,MAAMO,KAAK,CAACT,GAAD,EAAMC,IAAN,CAA5B;AACA,UAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAnB;AACAR,IAAAA,WAAW,CAACO,IAAD,CAAX;AACAL,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAPD;;AASAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG;AACCW,MAAAA,OAAO;AACV,KAFD,CAEC,OAAMI,GAAN,EAAU;AACPL,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AACJ,GANQ,EAMN,CAACP,GAAD,CANM,CAAT;AAOA,SAAO,CAAEE,QAAF,EAAYE,OAAZ,EAAqBE,QAArB,CAAP;AACH;;GAtBeP,Q","sourcesContent":["import {useEffect, useState} from \"react\";\r\nexport function useFetch(url, opts) {\r\n    const [response, setResponse] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n    const [hasError, setHasError] = useState(false)\r\n    \r\n    const doFetch=async()=>{\r\n        setHasError(false);\r\n        setLoading(true);\r\n        const response = await fetch(url, opts);\r\n        const data = await response.json();\r\n        setResponse(data);\r\n        setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        try{\r\n            doFetch();\r\n        }catch(err){\r\n            setHasError(true);\r\n        }\r\n    }, [url])\r\n    return [ response, loading, hasError ]\r\n}"]},"metadata":{},"sourceType":"module"}