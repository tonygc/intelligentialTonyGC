{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport function useFetch(url, opts) {\n  _s();\n\n  const [response, setResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    fetch(url, opts).then(res => {\n      console.log(\"response!!!!->\", res);\n      setResponse(res.data);\n      setLoading(false);\n    }).catch(() => {\n      setHasError(true);\n      setLoading(false);\n    });\n  }, [url]);\n  return [response, loading, hasError];\n}\n\n_s(useFetch, \"2P4JWcX0CkVNVRdIRDSsSZZFJRU=\");","map":{"version":3,"sources":["C:/Proyectos/Challenges/intelligential/3. Caso PrÃ¡ctico/client-react/src/components/customHooks/requestAPI/index.js"],"names":["useEffect","useState","useFetch","url","opts","response","setResponse","loading","setLoading","hasError","setHasError","fetch","then","res","console","log","data","catch"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAAA;;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAG,IAAAA,KAAK,CAACR,GAAD,EAAMC,IAAN,CAAL,CACKQ,IADL,CACWC,GAAD,IAAS;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BF,GAA7B;AACAP,MAAAA,WAAW,CAACO,GAAG,CAACG,IAAL,CAAX;AACAR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KALD,EAMKS,KANL,CAMW,MAAM;AACTP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KATL;AAUH,GAZQ,EAYN,CAACL,GAAD,CAZM,CAAT;AAaA,SAAO,CAAEE,QAAF,EAAYE,OAAZ,EAAqBE,QAArB,CAAP;AACH;;GAlBeP,Q","sourcesContent":["import {useEffect, useState} from \"react\";\r\nexport function useFetch(url, opts) {\r\n    const [response, setResponse] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n    const [hasError, setHasError] = useState(false)\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetch(url, opts)\r\n            .then((res) => {\r\n            console.log(\"response!!!!->\",res);\r\n            setResponse(res.data)\r\n            setLoading(false)\r\n        })\r\n            .catch(() => {\r\n                setHasError(true)\r\n                setLoading(false)\r\n            })\r\n    }, [url])\r\n    return [ response, loading, hasError ]\r\n}"]},"metadata":{},"sourceType":"module"}